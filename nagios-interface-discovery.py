#!/usr/bin/python

#################################################################################
#
#  NAGIOS INTERFACE DISCOVERY SCRIPT
#
# Created by: Alex Martins
#
# Last Update on: Feb-21-2016
#
# How to execute the script:
# USAGE: nagios-interface-discovery IP-ADDRESS HOSTNAME <device-type> <output-servicegroup>
# OPTIONS:
#    <device-type>          set device type (Cisco[default]|F5)
#    <output-servicegroup>  (0=no [default], 1=print at the end, 2=print only service-group)
#
#################################################################################

# Import Libraries
import commands
import sys
import datetime
import argparse
import socket

# Check CLI arguments
parser = argparse.ArgumentParser(description='Nagios Interface Discovery Script')
parser.add_argument('ip', metavar='IP-ADDRESS', help='Device IP Address. Ex: 192.168.1.1')
parser.add_argument('hostname', metavar='HOSTNAME', help='Device Hostname in NAGIOS!. Ex: router1')
parser.add_argument('deviceType', metavar='DEVICE-TYPE', choices=['Cisco','F5'],  nargs='?', default='Cisco', help='Device Type: Cisco [default] or F5')
parser.add_argument('serviceGroup', metavar='SERVICEGROUP', nargs='?', type= int, choices=xrange(0,3), default='0', help='Print ServiceGroup: 0=no [default], 1=print at the end, 2=print only service-group')
args = parser.parse_args()

#print "IP: " + str(args.ip)
#print "HOSTNAME: " + str(args.hostname)
#print "DEVICE-TYPE: " + str(args.deviceType)
#print "SERVICEGROUP: " + str(args.serviceGroup)

try:
    socket.inet_aton(args.ip)
    #print "IP ok!"
except socket.error:
    print "Not a valid IP Address!"

servicegroup = int(args.serviceGroup)

# GET DATETIME
time = datetime.datetime.now()

# Import SNMPv3 Credentials from file
from snmpv3Credentials import *

var1 = 'snmpwalk -v3 -u netmon -l authPriv -a ' + snmp['auth'] + ' -A ' + snmp['authPass'] + ' -x ' + snmp['priv'] + ' -X ' + snmp['privPass'] + ' ' + str(args.ip) + ' ifOperStatus'
var2 = 'snmpwalk -v3 -u netmon -l authPriv -a ' + snmp['auth'] + ' -A ' + snmp['authPass'] + ' -x ' + snmp['priv'] + ' -X ' + snmp['privPass'] + ' ' + str(args.ip) + ' ifDescr'
var3 = 'snmpwalk -v3 -u netmon -l authPriv -a ' + snmp['auth'] + ' -A ' + snmp['authPass'] + ' -x ' + snmp['priv'] + ' -X ' + snmp['privPass'] + ' ' + str(args.ip) + ' ifAlias'
hostname = str(args.hostname)

# SNMP OID
oidIfOperStatus = ".1.3.6.1.2.1.2.2.1.8"
oidIfDescr = ".1.3.6.1.2.1.2.2.1.2"
oidIfAlias = ".1.3.6.1.2.1.31.1.1.1.18"

#print var1 + '\n'

ifOperStatus = commands.getoutput(var1)
ifDescr = commands.getoutput(var2)
# F5 doesnt have Interface Alias so Alias will be the same as Interface Description
if (args.deviceType == "F5"):
    var3 = var2
ifAlias = commands.getoutput(var3)

#pos1 = ifOperStatus.find("ifOperStatus")
#pos2 = ifOperStatus.find(" =")
#print "Pos1 = " + str(pos1)
#print "Pos2 = " + str(pos2)
#print ifOperStatus[pos1:pos2]

# Dictionary to story ifOperStatus,ifDescr,ifAlias
dict = {}
dict [0] = ifOperStatus.split('\n')
dict [1] = ifDescr.split('\n')
dict [2] = ifAlias.split('\n')

#info = ifOperStatus.split('\n')

#print dict[0][0]
#print dict[1][0]
#print dict[2][0]
#print len(dict[0])

# VAR to Store Members for SERVICEGROUP
members = ""

# PRINT HEADER
print "##########################################################################################"
print "#                                                                                        #"
print "#                             DO NOT MODIFY THIS FILE!!!                                 #"
print "#                      THIS FILE HAS BEEN AUTO-GENERATED BY:                             #"
print "#              THE DISCOVERY SCRIPT ON " + str(time) +  "                        #"
print "#                                                                                        #"
print "##########################################################################################"

numInterfaces = len(dict[0])
value = 0
if (servicegroup != 2):
    while value < numInterfaces:
        #pos1 = dict[0][value].find("ifOperStatus") // Modified to OID to speed snmp query
        pos1 = dict[0][value].find(".")
        pos2 = dict[0][value].find(" =")
        interface = oidIfOperStatus + dict[0][value][pos1:pos2]
    
        pos1 = dict[1][value].find("STRING")
        pos1 = pos1 + 8
        if dict[1][value][pos1:].find("\'") != -1:
            #print "Found Single Quote"
            description = dict[1][value][pos1:]
            description = description[description.find("'")+1:description.rfind("'")]
        else:
            description = dict[1][value][pos1:]
        
        pos1 = dict[2][value].find("STRING")
        pos1 = pos1 + 8
        if dict[2][value][pos1:] == "":
            alias = description
        else:
            alias = dict[2][value][pos1:]
        
        # If interface is enabled and up
        if (dict[0][value].find("up(1)")) != -1:
            print "\n\ndefine service{"
            print "\tuse\t\t\tprod-service ;"
            print "\thost_name\t\t" + hostname + " ;"
            print "\tservice_description\t" + description + " ;"
            print "\tdisplay_name\t\t" + alias + " ;"
            print "\tcheck_command\t\tcheck_snmp!-P 3 -U netmon -L authPriv -a SHA -A $USER3$ -x AES -X $USER4$ -o \"" + interface + "\" -r 1 ;"
            print "\t}"
            
            if members == "":
                members = members + hostname + "," + description
            else:
                members = members + "," + hostname + "," + description
        elif alias != "Open [NOT BEING USED]":
            print "\n\n############ INTERFACE IS ENABLED BUT DOWN ###########"
            print "define service{"
            print "\tuse\t\t\tprod-service ;"
            print "\thost_name\t\t" + hostname + " ;"
            print "\tservice_description\t" + description + " ;"
            print "\tdisplay_name\t\t" + alias + " ;"
            print "\tnotifications_enabled\t0 ;"
            print "\tcheck_command\t\tcheck_snmp!-P 3 -U netmon -L authPriv -a SHA -A $USER3$ -x AES -X $USER4$ -o \"" + interface + "\" -r 1 ;"
            print "\t}"
        else:
            print "\n\n############ INTERFACE IS ADMINISTRATIVELY SHUTDOWN ###########"
            print "#define service{"
            print "#\tuse\t\t\tprod-service ;"
            print "#\thost_name\t\t" + hostname + " ;"
            print "#\tservice_description\t" + description + " ;"
            print "#\tdisplay_name\t\t" + alias + " ;"
            print "#\tcheck_command\t\tcheck_snmp!-P 3 -U netmon -L authPriv -a SHA -A $USER3$ -x AES -X $USER4$ -o \"" + interface + "\" -r 1 ;"
            print "#\t}"
        value = value + 1

print "\n"

if (servicegroup != 0):
    if (len(hostname) > 12):
        serviceGroupName = hostname[5:11] + hostname[12:]
    else:
        serviceGroupName = hostname[5:11]
    
    #print serviceGroupName
    
    print "\n\n############ SERVICE-GROUP ###########"
    print "define servicegroup{"
    print "\tservicegroup_name\t" + serviceGroupName + "-all-ports ;"
    print "\talias\t\t\t" + hostname + " All Ports ;"
    print "\tmembers\t\t\t" + members
    print "\t}"

